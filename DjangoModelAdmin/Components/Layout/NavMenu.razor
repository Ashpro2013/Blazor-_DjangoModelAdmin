@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Ashpro</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />
<AuthorizeView>
    <Authorized>
<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
                @foreach (var item in entMenuDetails)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@item.ViewName">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @item.DisplayName
                        </NavLink>
                    </div>
                }
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Profile
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
    </nav>
</div>
    </Authorized>
</AuthorizeView>
@code {
    private string? currentUrl;
    private List<MenuDetails> entMenuDetails= new List<MenuDetails>();

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        entMenuDetails.AddRange(
            new MenuDetails { DisplayName = "Doctors", ViewName = "doctors" },
            new MenuDetails { DisplayName = "Bookings", ViewName = "bookings" },
            new MenuDetails { DisplayName = "Departments", ViewName = "departments" }
        );

    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    class MenuDetails()
    {
        public string DisplayName { get; set; }
        public string ViewName { get; set; }
    }
}

