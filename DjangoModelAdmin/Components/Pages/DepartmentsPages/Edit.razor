@page "/departments/edit"
@using Microsoft.EntityFrameworkCore
@using DjangoModelAdmin.Model
@using DjangoModelAdmin.Data
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Departments</h2>
<hr />
@if (Departments is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Departments" OnValidSubmit="UpdateDepartments" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Departments.dep_id" value="@Departments.dep_id" />
                <div class="mb-3">
                    <label for="dep_name" class="form-label">dep_name:</label>
                    <InputText id="dep_name" @bind-Value="Departments.dep_name" class="form-control" />
                    <ValidationMessage For="() => Departments.dep_name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dep_description" class="form-label">dep_description:</label>
                    <InputText id="dep_description" @bind-Value="Departments.dep_description" class="form-control" />
                    <ValidationMessage For="() => Departments.dep_description" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/departments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int dep_id { get; set; }

    [SupplyParameterFromForm]
    private Departments? Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Departments ??= await context.Departments.FirstOrDefaultAsync(m => m.dep_id == dep_id);

        if (Departments is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateDepartments()
    {
        context.Attach(Departments!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DepartmentsExists(Departments!.dep_id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/departments");
    }

    private bool DepartmentsExists(int dep_id)
    {
        return context.Departments.Any(e => e.dep_id == dep_id);
    }
}
