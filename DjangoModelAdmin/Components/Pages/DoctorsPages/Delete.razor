@page "/doctors/delete"
@using Microsoft.EntityFrameworkCore
@using DjangoModelAdmin.Model
@using DjangoModelAdmin.Data
@inject ApplicationDbContext context
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Doctors</h2>
    <hr />
    @if (doctors is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">doc_name</dt>
            <dd class="col-sm-10">@doctors.doc_name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">doc_spec</dt>
            <dd class="col-sm-10">@doctors.doc_spec</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">dep_id</dt>
            <dd class="col-sm-10">@doctors.dep_id</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">doc_image</dt>
            <dd class="col-sm-10">@doctors.doc_image</dd>
        </dl>
        <EditForm method="post" Model="doctors" OnValidSubmit="DeleteDoctors" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(doctors is null)">Delete</button> |
            <a href="/doctors">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Doctors? doctors;

    [SupplyParameterFromQuery]
    private int doc_id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        doctors = await context.Doctors.FirstOrDefaultAsync(m => m.doc_id == doc_id);

        if (doctors is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDoctors()
    {
        context.Doctors.Remove(doctors!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/doctors");
    }
}
